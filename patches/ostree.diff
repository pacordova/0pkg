From 4d755a85225ea0a02d4580d088bb8a97138cb040 Mon Sep 17 00:00:00 2001
From: Colin Walters <walters@verbum.org>
Date: Wed, 18 Sep 2024 13:41:59 -0400
Subject: [PATCH] curl: Make socket callback during cleanup into no-op

Because curl_multi_cleanup may invoke callbacks, we effectively have
some circular references going on here. See discussion in

https://github.com/curl/curl/issues/14860

Basically what we do is the socket callback libcurl may invoke into a no-op when
we detect we're finalizing. The data structures are owned by this object and
not by the callbacks, and will be destroyed below. Note that
e.g. g_hash_table_unref() may itself invoke callbacks, which is where
some data is cleaned up.

Signed-off-by: Colin Walters <walters@verbum.org>
---
 src/libostree/ostree-fetcher-curl.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/src/libostree/ostree-fetcher-curl.c b/src/libostree/ostree-fetcher-curl.c
index d6902893ff..8054812f57 100644
--- a/src/libostree/ostree-fetcher-curl.c
+++ b/src/libostree/ostree-fetcher-curl.c
@@ -78,6 +78,7 @@ struct OstreeFetcher
   struct curl_slist *extra_headers;
   int tmpdir_dfd;
   bool force_anonymous;
+  bool finalizing; // Set if we're in the process of teardown
   char *custom_user_agent;
   guint32 opt_low_speed_limit;
   guint32 opt_low_speed_time;
@@ -180,6 +181,15 @@ _ostree_fetcher_finalize (GObject *object)
 {
   OstreeFetcher *self = OSTREE_FETCHER (object);
 
+  // Because curl_multi_cleanup may invoke callbacks, we effectively have
+  // some circular references going on here. See discussion in
+  // https://github.com/curl/curl/issues/14860
+  // Basically what we do is make most callbacks libcurl may invoke into no-ops when
+  // we detect we're finalizing. The data structures are owned by this object and
+  // not by the callbacks, and will be destroyed below. Note that
+  // e.g. g_hash_table_unref() may itself invoke callbacks, which is where
+  // some data is cleaned up.
+  self->finalizing = true;
   curl_multi_cleanup (self->multi);
   g_free (self->remote_name);
   g_free (self->tls_ca_db_path);
@@ -528,6 +538,10 @@ sock_cb (CURL *easy, curl_socket_t s, int what, void *cbp, void *sockp)
   OstreeFetcher *fetcher = cbp;
   SockInfo *fdp = (SockInfo *)sockp;
 
+  // We do nothing if we're in the process of teardown; see below.
+  if (fetcher->finalizing)
+    return 0;
+
   if (what == CURL_POLL_REMOVE)
     {
       if (!g_hash_table_remove (fetcher->sockets, fdp))
diff --git i/man/rofiles-fuse.xml w/man/rofiles-fuse.xml
index f4d23739..e8569130 100644
--- i/man/rofiles-fuse.xml
+++ w/man/rofiles-fuse.xml
@@ -89,7 +89,7 @@ $ mkdir mnt/anewdir
 $ rm mnt/someoriginalcontent -rf
 
 # Commit and cleanup
-$ fusermount -u mnt
+$ fusermount3 -u mnt
 $ ostree --repo=repo commit --link-checkout-speedup -b somebranch -s 'Commit new content' --tree=dir=branch-checkout
 $ rm mnt branch-checkout -rf
 	</programlisting>
diff --git i/tests/libtest.sh w/tests/libtest.sh
index 264094b1..cd1e0986 100755
--- i/tests/libtest.sh
+++ w/tests/libtest.sh
@@ -683,7 +683,7 @@ skip_one_without_strace_fault_injection() {
 }
 
 skip_without_fuse () {
-    fusermount --version >/dev/null 2>&1 || skip "no fusermount"
+    fusermount3 --version >/dev/null 2>&1 || skip "no fusermount3"
 
     capsh --print | grep -q 'Bounding set.*[^a-z]cap_sys_admin' || \
         skip "No cap_sys_admin in bounding set, can't use FUSE"
diff --git i/tests/test-demo-buildsystem.sh w/tests/test-demo-buildsystem.sh
index 2dc78dc3..50995b87 100755
--- i/tests/test-demo-buildsystem.sh
+++ w/tests/test-demo-buildsystem.sh
@@ -55,7 +55,7 @@ exampleos_recompose() {
     # Now that we have our rootfs, run triggers
     rofiles-fuse exampleos-build mnt
     demo_triggers mnt/
-    fusermount -u mnt
+    fusermount3 -u mnt
     
     # Then we commit it, using --link-checkout-speedup to effectively
     # only re-checksum the ldconfig file.  We also have dummy commit
diff --git i/tests/test-rofiles-fuse.sh w/tests/test-rofiles-fuse.sh
index a56a76c6..c61945d6 100755
--- i/tests/test-rofiles-fuse.sh
+++ w/tests/test-rofiles-fuse.sh
@@ -37,7 +37,7 @@ $OSTREE checkout -H test2 checkout-test2
 
 rofiles-fuse checkout-test2 mnt
 cleanup_fuse() {
-    fusermount -u ${test_tmpdir}/mnt || true
+    fusermount3 -u ${test_tmpdir}/mnt || true
 }
 libtest_exit_cmds+=(cleanup_fuse)
 assert_file_has_content mnt/firstfile first
@@ -133,7 +133,7 @@ echo "ok flock"
 
 copyup_reset() {
     cd ${test_tmpdir}
-    fusermount -u mnt
+    fusermount3 -u mnt
     rm checkout-test2 -rf
     $OSTREE checkout -H test2 checkout-test2
     rofiles-fuse --copyup checkout-test2 mnt
